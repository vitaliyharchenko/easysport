if("undefined"==typeof jQuery)throw new Error("Jasny Bootstrap's JavaScript requires jQuery");+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}void 0===t.support.transition&&(t.fn.emulateTransitionEnd=function(e){var i=!1,s=this;t(this).one(t.support.transition.end,function(){i=!0});var n=function(){i||t(s).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e()}))}(window.jQuery),+function(t){"use strict";var e=function(i,s){this.$element=t(i),this.options=t.extend({},e.DEFAULTS,s),this.state=null,this.placement=null,this.options.recalc&&(this.calcClone(),t(window).on("resize",t.proxy(this.recalc,this))),this.options.autohide&&t(document).on("click",t.proxy(this.autohide,this)),this.options.toggle&&this.toggle(),this.options.disablescrolling&&(this.options.disableScrolling=this.options.disablescrolling,delete this.options.disablescrolling)};e.DEFAULTS={toggle:!0,placement:"auto",autohide:!0,recalc:!0,disableScrolling:!0,modal:!1},e.prototype.offset=function(){switch(this.placement){case"left":case"right":return this.$element.outerWidth();case"top":case"bottom":return this.$element.outerHeight()}},e.prototype.calcPlacement=function(){function e(t,e){if("auto"===n.css(e))return t;if("auto"===n.css(t))return e;var i=parseInt(n.css(t),10),s=parseInt(n.css(e),10);return i>s?e:t}if("auto"!==this.options.placement)return void(this.placement=this.options.placement);this.$element.hasClass("in")||this.$element.css("visiblity","hidden !important").addClass("in");var i=t(window).width()/this.$element.width(),s=t(window).height()/this.$element.height(),n=this.$element;this.placement=i>=s?e("left","right"):e("top","bottom"),"hidden !important"===this.$element.css("visibility")&&this.$element.removeClass("in").css("visiblity","")},e.prototype.opposite=function(t){switch(t){case"top":return"bottom";case"left":return"right";case"bottom":return"top";case"right":return"left"}},e.prototype.getCanvasElements=function(){var e=this.options.canvas?t(this.options.canvas):this.$element,i=e.find("*").filter(function(){return"fixed"===t(this).css("position")}).not(this.options.exclude);return e.add(i)},e.prototype.slide=function(e,i,s){if(!t.support.transition){var n={};return n[this.placement]="+="+i,e.animate(n,350,s)}var a=this.placement,o=this.opposite(a);e.each(function(){"auto"!==t(this).css(a)&&t(this).css(a,(parseInt(t(this).css(a),10)||0)+i),"auto"!==t(this).css(o)&&t(this).css(o,(parseInt(t(this).css(o),10)||0)-i)}),this.$element.one(t.support.transition.end,s).emulateTransitionEnd(350)},e.prototype.disableScrolling=function(){var e=t("body").width(),i="padding-"+this.opposite(this.placement);if(void 0===t("body").data("offcanvas-style")&&t("body").data("offcanvas-style",t("body").attr("style")||""),t("body").css("overflow","hidden"),t("body").width()>e){var s=parseInt(t("body").css(i),10)+t("body").width()-e;setTimeout(function(){t("body").css(i,s)},1)}t("body").on("touchmove.bs",function(t){t.preventDefault()})},e.prototype.enableScrolling=function(){t("body").off("touchmove.bs")},e.prototype.show=function(){if(!this.state){var e=t.Event("show.bs.offcanvas");if(this.$element.trigger(e),!e.isDefaultPrevented()){this.state="slide-in",this.calcPlacement();var i=this.getCanvasElements(),s=this.placement,n=this.opposite(s),a=this.offset();i.index(this.$element)!==-1&&(t(this.$element).data("offcanvas-style",t(this.$element).attr("style")||""),this.$element.css(s,-1*a),this.$element.css(s)),i.addClass("canvas-sliding").each(function(){void 0===t(this).data("offcanvas-style")&&t(this).data("offcanvas-style",t(this).attr("style")||""),"static"===t(this).css("position")&&t(this).css("position","relative"),"auto"!==t(this).css(s)&&"0px"!==t(this).css(s)||"auto"!==t(this).css(n)&&"0px"!==t(this).css(n)||t(this).css(s,0)}),this.options.disableScrolling&&this.disableScrolling(),this.options.modal&&this.toggleBackdrop();var o=function(){"slide-in"==this.state&&(this.state="slid",i.removeClass("canvas-sliding").addClass("canvas-slid"),this.$element.trigger("shown.bs.offcanvas"))};setTimeout(t.proxy(function(){this.$element.addClass("in"),this.slide(i,a,t.proxy(o,this))},this),1)}}},e.prototype.hide=function(e){if("slid"===this.state){var i=t.Event("hide.bs.offcanvas");if(this.$element.trigger(i),!i.isDefaultPrevented()){this.state="slide-out";var s=t(".canvas-slid"),n=(this.placement,-1*this.offset()),a=function(){"slide-out"==this.state&&(this.state=null,this.placement=null,this.$element.removeClass("in"),s.removeClass("canvas-sliding"),s.add(this.$element).add("body").each(function(){t(this).attr("style",t(this).data("offcanvas-style")).removeData("offcanvas-style")}),this.$element.trigger("hidden.bs.offcanvas"))};this.options.disableScrolling&&this.enableScrolling(),this.options.modal&&this.toggleBackdrop(),s.removeClass("canvas-slid").addClass("canvas-sliding"),setTimeout(t.proxy(function(){this.slide(s,n,t.proxy(a,this))},this),1)}}},e.prototype.toggle=function(){"slide-in"!==this.state&&"slide-out"!==this.state&&this["slid"===this.state?"hide":"show"]()},e.prototype.toggleBackdrop=function(e){if(e=e||t.noop,"slide-in"==this.state){var i=t.support.transition;this.$backdrop=t('<div class="modal-backdrop fade" />').insertAfter(this.$element),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),i?this.$backdrop.one(t.support.transition.end,e).emulateTransitionEnd(150):e()}else if("slide-out"==this.state&&this.$backdrop){this.$backdrop.removeClass("in"),t("body").off("touchmove.bs");var s=this;t.support.transition?this.$backdrop.one(t.support.transition.end,function(){s.$backdrop.remove(),e(),s.$backdrop=null}).emulateTransitionEnd(150):(this.$backdrop.remove(),this.$backdrop=null,e())}else e&&e()},e.prototype.calcClone=function(){this.$calcClone=this.$element.clone().html("").addClass("offcanvas-clone").removeClass("in").appendTo(t("body"))},e.prototype.recalc=function(){if("none"!==this.$calcClone.css("display")&&("slid"===this.state||"slide-in"===this.state)){this.state=null,this.placement=null;var e=this.getCanvasElements();this.$element.removeClass("in"),e.removeClass("canvas-slid"),e.add(this.$element).add("body").each(function(){t(this).attr("style",t(this).data("offcanvas-style")).removeData("offcanvas-style")})}},e.prototype.autohide=function(e){0===t(e.target).closest(this.$element).length&&this.hide()};var i=t.fn.offcanvas;t.fn.offcanvas=function(i){return this.each(function(){var s=t(this),n=s.data("bs.offcanvas"),a=t.extend({},e.DEFAULTS,s.data(),"object"==typeof i&&i);n||s.data("bs.offcanvas",n=new e(this,a)),"string"==typeof i&&n[i]()})},t.fn.offcanvas.Constructor=e,t.fn.offcanvas.noConflict=function(){return t.fn.offcanvas=i,this},t(document).on("click.bs.offcanvas.data-api","[data-toggle=offcanvas]",function(e){var i,s=t(this),n=s.attr("data-target")||e.preventDefault()||(i=s.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""),a=t(n),o=a.data("bs.offcanvas"),r=o?"toggle":s.data();e.stopPropagation(),o?o.toggle():a.offcanvas(r)})}(window.jQuery),+function(t){"use strict";var e=function(i,s){this.$element=t(i),this.options=t.extend({},e.DEFAULTS,s),this.$element.on("click.bs.rowlink","td:not(.rowlink-skip)",t.proxy(this.click,this))};e.DEFAULTS={target:"a"},e.prototype.click=function(e){var i=t(e.currentTarget).closest("tr").find(this.options.target)[0];if(t(e.target)[0]!==i)if(e.preventDefault(),i.click)i.click();else if(document.createEvent){var s=document.createEvent("MouseEvents");s.initMouseEvent("click",!0,!0,window,0,0,0,0,0,!1,!1,!1,!1,0,null),i.dispatchEvent(s)}};var i=t.fn.rowlink;t.fn.rowlink=function(i){return this.each(function(){var s=t(this),n=s.data("bs.rowlink");n||s.data("bs.rowlink",n=new e(this,i))})},t.fn.rowlink.Constructor=e,t.fn.rowlink.noConflict=function(){return t.fn.rowlink=i,this},t(document).on("click.bs.rowlink.data-api",'[data-link="row"]',function(e){if(0===t(e.target).closest(".rowlink-skip").length){var i=t(this);i.data("bs.rowlink")||(i.rowlink(i.data()),t(e.target).trigger("click.bs.rowlink"))}})}(window.jQuery),+function(t){"use strict";var e=void 0!==window.orientation,i=navigator.userAgent.toLowerCase().indexOf("android")>-1,s="Microsoft Internet Explorer"==window.navigator.appName,n=function(e,s){i||(this.$element=t(e),this.options=t.extend({},n.DEFAULTS,s),this.mask=String(this.options.mask),this.init(),this.listen(),this.checkVal())};n.DEFAULTS={mask:"",placeholder:"_",definitions:{9:"[0-9]",a:"[A-Za-z]",w:"[A-Za-z0-9]","*":"."}},n.prototype.init=function(){var e=this.options.definitions,i=this.mask.length;this.tests=[],this.partialPosition=this.mask.length,this.firstNonMaskPos=null,t.each(this.mask.split(""),t.proxy(function(t,s){"?"==s?(i--,this.partialPosition=t):e[s]?(this.tests.push(new RegExp(e[s])),null===this.firstNonMaskPos&&(this.firstNonMaskPos=this.tests.length-1)):this.tests.push(null)},this)),this.buffer=t.map(this.mask.split(""),t.proxy(function(t,i){if("?"!=t)return e[t]?this.options.placeholder:t},this)),this.focusText=this.$element.val(),this.$element.data("rawMaskFn",t.proxy(function(){return t.map(this.buffer,function(t,e){return this.tests[e]&&t!=this.options.placeholder?t:null}).join("")},this))},n.prototype.listen=function(){if(!this.$element.attr("readonly")){var e=(s?"paste":"input")+".bs.inputmask";this.$element.on("unmask.bs.inputmask",t.proxy(this.unmask,this)).on("focus.bs.inputmask",t.proxy(this.focusEvent,this)).on("blur.bs.inputmask",t.proxy(this.blurEvent,this)).on("keydown.bs.inputmask",t.proxy(this.keydownEvent,this)).on("keypress.bs.inputmask",t.proxy(this.keypressEvent,this)).on(e,t.proxy(this.pasteEvent,this))}},n.prototype.caret=function(t,e){if(0!==this.$element.length){if("number"==typeof t)return e="number"==typeof e?e:t,this.$element.each(function(){if(this.setSelectionRange)this.setSelectionRange(t,e);else if(this.createTextRange){var i=this.createTextRange();i.collapse(!0),i.moveEnd("character",e),i.moveStart("character",t),i.select()}});if(this.$element[0].setSelectionRange)t=this.$element[0].selectionStart,e=this.$element[0].selectionEnd;else if(document.selection&&document.selection.createRange){var i=document.selection.createRange();t=0-i.duplicate().moveStart("character",-1e5),e=t+i.text.length}return{begin:t,end:e}}},n.prototype.seekNext=function(t){for(var e=this.mask.length;++t<=e&&!this.tests[t];);return t},n.prototype.seekPrev=function(t){for(;--t>=0&&!this.tests[t];);return t},n.prototype.shiftL=function(t,e){var i=this.mask.length;if(!(t<0)){for(var s=t,n=this.seekNext(e);s<i;s++)if(this.tests[s]){if(!(n<i&&this.tests[s].test(this.buffer[n])))break;this.buffer[s]=this.buffer[n],this.buffer[n]=this.options.placeholder,n=this.seekNext(n)}this.writeBuffer(),this.caret(Math.max(this.firstNonMaskPos,t))}},n.prototype.shiftR=function(t){for(var e=this.mask.length,i=t,s=this.options.placeholder;i<e;i++)if(this.tests[i]){var n=this.seekNext(i),a=this.buffer[i];if(this.buffer[i]=s,!(n<e&&this.tests[n].test(a)))break;s=a}},n.prototype.unmask=function(){this.$element.unbind(".bs.inputmask").removeData("bs.inputmask")},n.prototype.focusEvent=function(){this.focusText=this.$element.val();var t=this.mask.length,e=this.checkVal();this.writeBuffer();var i=this,s=function(){e==t?i.caret(0,e):i.caret(e)};s(),setTimeout(s,50)},n.prototype.blurEvent=function(){this.checkVal(),this.$element.val()!==this.focusText&&(this.$element.trigger("change"),this.$element.trigger("input"))},n.prototype.keydownEvent=function(t){var i=t.which;if(8==i||46==i||e&&127==i){var s=this.caret(),n=s.begin,a=s.end;return a-n===0&&(n=46!=i?this.seekPrev(n):a=this.seekNext(n-1),a=46==i?this.seekNext(a):a),this.clearBuffer(n,a),this.shiftL(n,a-1),!1}if(27==i)return this.$element.val(this.focusText),this.caret(0,this.checkVal()),!1},n.prototype.keypressEvent=function(t){var e=this.mask.length,i=t.which,s=this.caret();if(t.ctrlKey||t.altKey||t.metaKey||i<32)return!0;if(i){s.end-s.begin!==0&&(this.clearBuffer(s.begin,s.end),this.shiftL(s.begin,s.end-1));var n=this.seekNext(s.begin-1);if(n<e){var a=String.fromCharCode(i);if(this.tests[n].test(a)){this.shiftR(n),this.buffer[n]=a,this.writeBuffer();var o=this.seekNext(n);this.caret(o)}}return!1}},n.prototype.pasteEvent=function(){var t=this;setTimeout(function(){t.caret(t.checkVal(!0))},0)},n.prototype.clearBuffer=function(t,e){for(var i=this.mask.length,s=t;s<e&&s<i;s++)this.tests[s]&&(this.buffer[s]=this.options.placeholder)},n.prototype.writeBuffer=function(){return this.$element.val(this.buffer.join("")).val()},n.prototype.checkVal=function(t){for(var e=this.mask.length,i=this.$element.val(),s=-1,n=0,a=0;n<e;n++)if(this.tests[n]){for(this.buffer[n]=this.options.placeholder;a++<i.length;){var o=i.charAt(a-1);if(this.tests[n].test(o)){this.buffer[n]=o,s=n;break}}if(a>i.length)break}else this.buffer[n]==i.charAt(a)&&n!=this.partialPosition&&(a++,s=n);return!t&&s+1<this.partialPosition?(this.$element.val(""),this.clearBuffer(0,e)):(t||s+1>=this.partialPosition)&&(this.writeBuffer(),t||this.$element.val(this.$element.val().substring(0,s+1))),this.partialPosition?n:this.firstNonMaskPos};var a=t.fn.inputmask;t.fn.inputmask=function(e){return this.each(function(){var i=t(this),s=i.data("bs.inputmask");s||i.data("bs.inputmask",s=new n(this,e))})},t.fn.inputmask.Constructor=n,t.fn.inputmask.noConflict=function(){return t.fn.inputmask=a,this},t(document).on("focus.bs.inputmask.data-api","[data-mask]",function(e){var i=t(this);i.data("bs.inputmask")||i.inputmask(i.data())})}(window.jQuery),+function(t){"use strict";var e="Microsoft Internet Explorer"==window.navigator.appName,i=function(e,i){if(this.$element=t(e),this.$input=this.$element.find(":file"),0!==this.$input.length){this.name=this.$input.attr("name")||i.name,this.$hidden=this.$element.find('input[type=hidden][name="'+this.name+'"]'),0===this.$hidden.length&&(this.$hidden=t('<input type="hidden">').insertBefore(this.$input)),this.$preview=this.$element.find(".fileinput-preview");var s=this.$preview.css("height");"inline"!==this.$preview.css("display")&&"0px"!==s&&"none"!==s&&this.$preview.css("line-height",s),this.original={exists:this.$element.hasClass("fileinput-exists"),preview:this.$preview.html(),hiddenVal:this.$hidden.val()},this.listen()}};i.prototype.listen=function(){this.$input.on("change.bs.fileinput",t.proxy(this.change,this)),t(this.$input[0].form).on("reset.bs.fileinput",t.proxy(this.reset,this)),this.$element.find('[data-trigger="fileinput"]').on("click.bs.fileinput",t.proxy(this.trigger,this)),this.$element.find('[data-dismiss="fileinput"]').on("click.bs.fileinput",t.proxy(this.clear,this))},i.prototype.change=function(e){var i=void 0===e.target.files?e.target&&e.target.value?[{name:e.target.value.replace(/^.+\\/,"")}]:[]:e.target.files;if(e.stopPropagation(),0===i.length)return void this.clear();this.$hidden.val(""),this.$hidden.attr("name",""),this.$input.attr("name",this.name);var s=i[0];if(this.$preview.length>0&&("undefined"!=typeof s.type?s.type.match(/^image\/(gif|png|jpeg)$/):s.name.match(/\.(gif|png|jpe?g)$/i))&&"undefined"!=typeof FileReader){var n=new FileReader,a=this.$preview,o=this.$element;n.onload=function(e){var n=t("<img>");n[0].src=e.target.result,i[0].result=e.target.result,o.find(".fileinput-filename").text(s.name),"none"!=a.css("max-height")&&n.css("max-height",parseInt(a.css("max-height"),10)-parseInt(a.css("padding-top"),10)-parseInt(a.css("padding-bottom"),10)-parseInt(a.css("border-top"),10)-parseInt(a.css("border-bottom"),10)),a.html(n),o.addClass("fileinput-exists").removeClass("fileinput-new"),o.trigger("change.bs.fileinput",i)},n.readAsDataURL(s)}else this.$element.find(".fileinput-filename").text(s.name),this.$preview.text(s.name),this.$element.addClass("fileinput-exists").removeClass("fileinput-new"),this.$element.trigger("change.bs.fileinput")},i.prototype.clear=function(t){if(t&&t.preventDefault(),this.$hidden.val(""),this.$hidden.attr("name",this.name),this.$input.attr("name",""),e){var i=this.$input.clone(!0);this.$input.after(i),this.$input.remove(),this.$input=i}else this.$input.val("");this.$preview.html(""),this.$element.find(".fileinput-filename").text(""),this.$element.addClass("fileinput-new").removeClass("fileinput-exists"),void 0!==t&&(this.$input.trigger("change"),this.$element.trigger("clear.bs.fileinput"))},i.prototype.reset=function(){this.clear(),this.$hidden.val(this.original.hiddenVal),this.$preview.html(this.original.preview),this.$element.find(".fileinput-filename").text(""),this.original.exists?this.$element.addClass("fileinput-exists").removeClass("fileinput-new"):this.$element.addClass("fileinput-new").removeClass("fileinput-exists"),this.$element.trigger("reset.bs.fileinput")},i.prototype.trigger=function(t){this.$input.trigger("click"),t.preventDefault()};var s=t.fn.fileinput;t.fn.fileinput=function(e){return this.each(function(){var s=t(this),n=s.data("bs.fileinput");n||s.data("bs.fileinput",n=new i(this,e)),"string"==typeof e&&n[e]()})},t.fn.fileinput.Constructor=i,t.fn.fileinput.noConflict=function(){return t.fn.fileinput=s,this},t(document).on("click.fileinput.data-api",'[data-provides="fileinput"]',function(e){var i=t(this);if(!i.data("bs.fileinput")){i.fileinput(i.data());var s=t(e.target).closest('[data-dismiss="fileinput"],[data-trigger="fileinput"]');s.length>0&&(e.preventDefault(),s.trigger("click.bs.fileinput"))}})}(window.jQuery),$(document).on("click","#a-jasny-deleted",function(){$("#jasny-deleted").attr("value","1")}),$(document).on("click","#a-jasny-add",function(){$("#jasny-deleted").attr("value","0")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
