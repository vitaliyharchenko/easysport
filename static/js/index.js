!function(t){"use strict";var s=function(s,o){this.el=t(s),this.options=t.extend({},t.fn.typed.defaults,o),this.baseText=this.el.text()||this.el.attr("placeholder")||"",this.typeSpeed=this.options.typeSpeed,this.startDelay=this.options.startDelay,this.backSpeed=this.options.backSpeed,this.backDelay=this.options.backDelay,this.strings=this.options.strings,this.strPos=0,this.arrayPos=0,this.stopNum=0,this.loop=this.options.loop,this.loopCount=this.options.loopCount,this.curLoop=0,this.stop=!1,this.showCursor=!this.isInput&&this.options.showCursor,this.cursorChar=this.options.cursorChar,this.isInput=this.el.is("input"),this.attr=this.options.attr||(this.isInput?"placeholder":null),this.build()};s.prototype={constructor:s,init:function(){var t=this;t.timeout=setTimeout(function(){t.typewrite(t.strings[t.arrayPos],t.strPos)},t.startDelay)},build:function(){this.showCursor===!0&&(this.cursor=t('<span class="typed-cursor">'+this.cursorChar+"</span>"),this.el.after(this.cursor)),this.init()},typewrite:function(t,s){if(this.stop!==!0){var o=Math.round(70*Math.random())+this.typeSpeed,e=this;e.timeout=setTimeout(function(){var o=0,i=t.substr(s);if("^"===i.charAt(0)){var r=1;/^\^\d+/.test(i)&&(i=/\d+/.exec(i)[0],r+=i.length,o=parseInt(i)),t=t.substring(0,s)+t.substring(s+r)}e.timeout=setTimeout(function(){if(s===t.length){if(e.options.onStringTyped(e.arrayPos),e.arrayPos===e.strings.length-1&&(e.options.callback(),e.curLoop++,e.loop===!1||e.curLoop===e.loopCount))return;e.timeout=setTimeout(function(){e.backspace(t,s)},e.backDelay)}else{0===s&&e.options.preStringTyped(e.arrayPos);var o=e.baseText+t.substr(0,s+1);e.attr?e.el.attr(e.attr,o):e.el.text(o),s++,e.typewrite(t,s)}},o)},o)}},backspace:function(t,s){if(this.stop!==!0){var o=Math.round(70*Math.random())+this.backSpeed,e=this;e.timeout=setTimeout(function(){var o=e.baseText+t.substr(0,s);e.attr?e.el.attr(e.attr,o):e.el.text(o),s>e.stopNum?(s--,e.backspace(t,s)):s<=e.stopNum&&(e.arrayPos++,e.arrayPos===e.strings.length?(e.arrayPos=0,e.init()):e.typewrite(e.strings[e.arrayPos],s))},o)}},reset:function(){var t=this;clearInterval(t.timeout);var s=this.el.attr("id");this.el.after('<span id="'+s+'"/>'),this.el.remove(),this.cursor.remove(),t.options.resetCallback()}},t.fn.typed=function(o){return this.each(function(){var e=t(this),i=e.data("typed"),r="object"==typeof o&&o;i||e.data("typed",i=new s(this,r)),"string"==typeof o&&i[o]()})},t.fn.typed.defaults={strings:["These are the default values...","You know what you should do?","Use your own!","Have a great day!"],typeSpeed:0,startDelay:0,backSpeed:0,backDelay:500,loop:!1,loopCount:!1,showCursor:!0,cursorChar:"|",attr:null,callback:function(){},preStringTyped:function(){},onStringTyped:function(){},resetCallback:function(){}}}(window.jQuery),$(function(){$(".gamestyped").typed({strings:["футбол","баскетбол","волейбол"],typeSpeed:170,backDelay:600,loop:!0,loopCount:!1})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIiQiLCJUeXBlZCIsImVsIiwib3B0aW9ucyIsInRoaXMiLCJleHRlbmQiLCJmbiIsInR5cGVkIiwiZGVmYXVsdHMiLCJiYXNlVGV4dCIsInRleHQiLCJhdHRyIiwidHlwZVNwZWVkIiwic3RhcnREZWxheSIsImJhY2tTcGVlZCIsImJhY2tEZWxheSIsInN0cmluZ3MiLCJzdHJQb3MiLCJhcnJheVBvcyIsInN0b3BOdW0iLCJsb29wIiwibG9vcENvdW50IiwiY3VyTG9vcCIsInN0b3AiLCJzaG93Q3Vyc29yIiwiaXNJbnB1dCIsImN1cnNvckNoYXIiLCJpcyIsImJ1aWxkIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJpbml0Iiwic2VsZiIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwidHlwZXdyaXRlIiwiY3Vyc29yIiwiYWZ0ZXIiLCJjdXJTdHJpbmciLCJjdXJTdHJQb3MiLCJodW1hbml6ZSIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNoYXJQYXVzZSIsInN1YnN0ciIsImNoYXJBdCIsInNraXAiLCJ0ZXN0IiwiZXhlYyIsImxlbmd0aCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwib25TdHJpbmdUeXBlZCIsImNhbGxiYWNrIiwiYmFja3NwYWNlIiwicHJlU3RyaW5nVHlwZWQiLCJuZXh0U3RyaW5nIiwicmVzZXQiLCJjbGVhckludGVydmFsIiwiaWQiLCJyZW1vdmUiLCJyZXNldENhbGxiYWNrIiwib3B0aW9uIiwiZWFjaCIsIiR0aGlzIiwiZGF0YSIsIndpbmRvdyIsImpRdWVyeSJdLCJtYXBwaW5ncyI6IkNBNEJDLFNBQVNBLEdBRU4sWUFFQSxJQUFJQyxHQUFRLFNBQVNDLEVBQUlDLEdBR3JCQyxLQUFLRixHQUFLRixFQUFFRSxHQUdaRSxLQUFLRCxRQUFVSCxFQUFFSyxVQUFXTCxFQUFFTSxHQUFHQyxNQUFNQyxTQUFVTCxHQUdqREMsS0FBS0ssU0FBV0wsS0FBS0YsR0FBR1EsUUFBVU4sS0FBS0YsR0FB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V0FBVyxFQUVYRyxZQUFZLEVBRVpFLFdBQVksSUFFWmYsS0FBTSxLQUVOMkMsU0FBVSxhQUVWRSxlQUFnQixhQUVoQkgsY0FBZSxhQUVmUyxjQUFlLGVBSXJCSyxPQUFPQyxRQUVUcEUsRUFBRSxXQUNFQSxFQUFFLGVBQWVPLE9BQ2JTLFNBQVUsU0FBVSxZQUFhLFlBQ2pDSixVQUFXLElBQ1hHLFVBQVcsSUFDWEssTUFBTSxFQUNOQyxXQUFXIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHZpdGFsaXloYXJjaGVua28gb24gMTQuMTIuMTUuXG4gKi9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG4vLyBUeXBlZC5qcyB8IENvcHlyaWdodCAoYykgMjAxNCBNYXR0IEJvbGR0IHwgd3d3Lm1hdHRib2xkdC5jb21cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5cblxuXG4hZnVuY3Rpb24oJCl7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBUeXBlZCA9IGZ1bmN0aW9uKGVsLCBvcHRpb25zKXtcblxuICAgICAgICAvLyBjaG9zZW4gZWxlbWVudCB0byBtYW5pcHVsYXRlIHRleHRcbiAgICAgICAgdGhpcy5lbCA9ICQoZWwpO1xuXG4gICAgICAgIC8vIG9wdGlvbnNcbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sICQuZm4udHlwZWQuZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIHRleHQgY29udGVudCBvZiBlbGVtZW50XG4gICAgICAgIHRoaXMuYmFzZVRleHQgPSB0aGlzLmVsLnRleHQoKSB8fCB0aGlzLmVsLmF0dHIoJ3BsYWNlaG9sZGVyJykgfHwgJyc7XG5cbiAgICAgICAgLy8gdHlwaW5nIHNwZWVkXG4gICAgICAgIHRoaXMudHlwZVNwZWVkID0gdGhpcy5vcHRpb25zLnR5cGVTcGVlZDtcblxuICAgICAgICAvLyBhZGQgYSBkZWxheSBiZWZvcmUgdHlwaW5nIHN0YXJ0c1xuICAgICAgICB0aGlzLnN0YXJ0RGVsYXkgPSB0aGlzLm9wdGlvbnMuc3RhcnREZWxheTtcblxuICAgICAgICAvLyBiYWNrc3BhY2luZyBzcGVlZFxuICAgICAgICB0aGlzLmJhY2tTcGVlZCA9IHRoaXMub3B0aW9ucy5iYWNrU3BlZWQ7XG5cbiAgICAgICAgLy8gYW1vdW50IG9mIHRpbWUgdG8gd2FpdCBiZWZvcmUgYmFja3NwYWNpbmdcbiAgICAgICAgdGhpcy5iYWNrRGVsYXkgPSB0aGlzLm9wdGlvbnMuYmFja0RlbGF5O1xuXG4gICAgICAgIC8vIGlucHV0IHN0cmluZ3Mgb2YgdGV4dFxuICAgICAgICB0aGlzLnN0cmluZ3MgPSB0aGlzLm9wdGlvbnMuc3RyaW5ncztcblxuICAgICAgICAvLyBjaGFyYWN0ZXIgbnVtYmVyIHBvc2l0aW9uIG9mIGN1cnJlbnQgc3RyaW5nXG4gICAgICAgIHRoaXMuc3RyUG9zID0gMDtcblxuICAgICAgICAvLyBjdXJyZW50IGFycmF5IHBvc2l0aW9uXG4gICAgICAgIHRoaXMuYXJyYXlQb3MgPSAwO1xuXG4gICAgICAgIC8vIG51bWJlciB0byBzdG9wIGJhY2tzcGFjaW5nIG9uLlxuICAgICAgICAvLyBkZWZhdWx0IDAsIGNhbiBjaGFuZ2UgZGVwZW5kaW5nIG9uIGhvdyBtYW55IGNoYXJzXG4gICAgICAgIC8vIHlvdSB3YW50IHRvIHJlbW92ZSBhdCB0aGUgdGltZVxuICAgICAgICB0aGlzLnN0b3BOdW0gPSAwO1xuXG4gICAgICAgIC8vIExvb3BpbmcgbG9naWNcbiAgICAgICAgdGhpcy5sb29wID0gdGhpcy5vcHRpb25zLmxvb3A7XG4gICAgICAgIHRoaXMubG9vcENvdW50ID0gdGhpcy5vcHRpb25zLmxvb3BDb3VudDtcbiAgICAgICAgdGhpcy5jdXJMb29wID0gMDtcblxuICAgICAgICAvLyBmb3Igc3RvcHBpbmdcbiAgICAgICAgdGhpcy5zdG9wID0gZmFsc2U7XG5cbiAgICAgICAgLy8gc2hvdyBjdXJzb3JcbiAgICAgICAgdGhpcy5zaG93Q3Vyc29yID0gdGhpcy5pc0lucHV0ID8gZmFsc2UgOiB0aGlzLm9wdGlvbnMuc2hvd0N1cnNvcjtcblxuICAgICAgICAvLyBjdXN0b20gY3Vyc29yXG4gICAgICAgIHRoaXMuY3Vyc29yQ2hhciA9IHRoaXMub3B0aW9ucy5jdXJzb3JDaGFyO1xuXG4gICAgICAgIC8vIGF0dHJpYnV0ZSB0byB0eXBlXG4gICAgICAgIHRoaXMuaXNJbnB1dCA9IHRoaXMuZWwuaXMoJ2lucHV0Jyk7XG4gICAgICAgIHRoaXMuYXR0ciA9IHRoaXMub3B0aW9ucy5hdHRyIHx8ICh0aGlzLmlzSW5wdXQgPyAncGxhY2Vob2xkZXInIDogbnVsbCk7XG5cbiAgICAgICAgLy8gQWxsIHN5c3RlbXMgZ28hXG4gICAgICAgIHRoaXMuYnVpbGQoKTtcbiAgICB9O1xuXG4gICAgICAgIFR5cGVkLnByb3RvdHlwZSA9ICB7XG5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiBUeXBlZFxuXG4gICAgICAgICAgICAsIGluaXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gYmVnaW4gdGhlIGxvb3Agdy8gZmlyc3QgY3VycmVudCBzdHJpbmcgKGdsb2JhbCBzZWxmLnN0cmluZylcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IHN0cmluZyB3aWxsIGJlIHBhc3NlZCBhcyBhbiBhcmd1bWVudCBlYWNoIHRpbWUgYWZ0ZXIgdGhpc1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCB0eXBpbmdcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50eXBld3JpdGUoc2VsZi5zdHJpbmdzW3NlbGYuYXJyYXlQb3NdLCBzZWxmLnN0clBvcyk7XG4gICAgICAgICAgICAgICAgfSwgc2VsZi5zdGFydERlbGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLCBidWlsZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgY3Vyc29yXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0N1cnNvciA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICB0aGlzLmN1cnNvciA9ICQoXCI8c3BhbiBjbGFzcz1cXFwidHlwZWQtY3Vyc29yXFxcIj5cIiArIHRoaXMuY3Vyc29yQ2hhciArIFwiPC9zcGFuPlwiKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWwuYWZ0ZXIodGhpcy5jdXJzb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcGFzcyBjdXJyZW50IHN0cmluZyBzdGF0ZSB0byBlYWNoIGZ1bmN0aW9uLCB0eXBlcyAxIGNoYXIgcGVyIGNhbGxcbiAgICAgICAgICAgICwgdHlwZXdyaXRlOiBmdW5jdGlvbihjdXJTdHJpbmcsIGN1clN0clBvcyl7XG4gICAgICAgICAgICAgICAgLy8gZXhpdCB3aGVuIHN0b3BwZWRcbiAgICAgICAgICAgICAgICBpZih0aGlzLnN0b3AgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgLy8gdmFyeWluZyB2YWx1ZXMgZm9yIHNldFRpbWVvdXQgZHVyaW5nIHR5cGluZ1xuICAgICAgICAgICAgICAgIC8vIGNhbid0IGJlIGdsb2JhbCBzaW5jZSBudW1iZXIgY2hhbmdlcyBlYWNoIHRpbWUgbG9vcCBpcyBleGVjdXRlZFxuICAgICAgICAgICAgICAgIHZhciBodW1hbml6ZSA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqICgxMDAgLSAzMCkpICsgdGhpcy50eXBlU3BlZWQ7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLSBvcHRpb25hbCAtLS0tLS0tLS0tLS0tIC8vXG4gICAgICAgICAgICAgICAgLy8gYmFja3BhY2VzIGEgY2VydGFpbiBzdHJpbmcgZmFzdGVyXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4gICAgICAgICAgICAgICAgLy8gaWYgKHNlbGYuYXJyYXlQb3MgPT0gMSl7XG4gICAgICAgICAgICAgICAgLy8gIHNlbGYuYmFja0RlbGF5ID0gNTA7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIC8vIGVsc2V7IHNlbGYuYmFja0RlbGF5ID0gNTAwOyB9XG5cbiAgICAgICAgICAgICAgICAvLyBjb250YWluIHR5cGluZyBmdW5jdGlvbiBpbiBhIHRpbWVvdXQgaHVtYW5pemUnZCBkZWxheVxuICAgICAgICAgICAgICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBhbiBlc2NhcGUgY2hhcmFjdGVyIGJlZm9yZSBhIHBhdXNlIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvcm1hdDogXFxeXFxkKyAuLiBlZzogXjEwMDAgLi4gc2hvdWxkIGJlIGFibGUgdG8gcHJpbnQgdGhlIF4gdG9vIHVzaW5nIF5eXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmdsZSBeIGFyZSByZW1vdmVkIGZyb20gc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFyUGF1c2UgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic3RyID0gY3VyU3RyaW5nLnN1YnN0cihjdXJTdHJQb3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic3RyLmNoYXJBdCgwKSA9PT0gJ14nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpcCA9IDE7ICAvLyBza2lwIGF0bGVhc3QgMVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoL15cXF5cXGQrLy50ZXN0KHN1YnN0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnN0ciA9IC9cXGQrLy5leGVjKHN1YnN0cilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwICs9IHN1YnN0ci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyUGF1c2UgPSBwYXJzZUludChzdWJzdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdHJpcCBvdXQgdGhlIGVzY2FwZSBjaGFyYWN0ZXIgYW5kIHBhdXNlIHZhbHVlIHNvIHRoZXkncmUgbm90IHByaW50ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clN0cmluZyA9IGN1clN0cmluZy5zdWJzdHJpbmcoMCxjdXJTdHJQb3MpK2N1clN0cmluZy5zdWJzdHJpbmcoY3VyU3RyUG9zK3NraXApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGltZW91dCBmb3IgYW55IHBhdXNlIGFmdGVyIGEgY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJTdHJQb3MgPT09IGN1clN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcmVzIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMub25TdHJpbmdUeXBlZChzZWxmLmFycmF5UG9zKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlzIHRoaXMgdGhlIGZpbmFsIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5hcnJheVBvcyA9PT0gc2VsZi5zdHJpbmdzLmxlbmd0aC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmltYXRpb24gdGhhdCBvY2N1cnMgb24gdGhlIGxhc3QgdHlwZWQgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMuY2FsbGJhY2soKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJMb29wKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHF1aXQgaWYgd2Ugd29udCBsb29wIGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYubG9vcCA9PT0gZmFsc2UgfHwgc2VsZi5jdXJMb29wID09PSBzZWxmLmxvb3BDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5iYWNrc3BhY2UoY3VyU3RyaW5nLCBjdXJTdHJQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc2VsZi5iYWNrRGVsYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2FsbCBiZWZvcmUgZnVuY3Rpb25zIGlmIGFwcGxpY2FibGUgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1clN0clBvcyA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3B0aW9ucy5wcmVTdHJpbmdUeXBlZChzZWxmLmFycmF5UG9zKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnQgdHlwaW5nIGVhY2ggbmV3IGNoYXIgaW50byBleGlzdGluZyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1clN0cmluZzogYXJnLCBzZWxmLmJhc2VUZXh0OiBvcmlnaW5hbCB0ZXh0IGluc2lkZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFN0cmluZyA9IHNlbGYuYmFzZVRleHQgKyBjdXJTdHJpbmcuc3Vic3RyKDAsIGN1clN0clBvcysxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmF0dHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmVsLmF0dHIoc2VsZi5hdHRyLCBuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbC50ZXh0KG5leHRTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgY2hhcmFjdGVycyBvbmUgYnkgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJTdHJQb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnR5cGV3cml0ZShjdXJTdHJpbmcsIGN1clN0clBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGVuZCBvZiBjaGFyYWN0ZXIgcGF1c2VcbiAgICAgICAgICAgICAgICAgICAgfSwgY2hhclBhdXNlKTtcblxuICAgICAgICAgICAgICAgIC8vIGh1bWFuaXplZCB2YWx1ZSBmb3IgdHlwaW5nXG4gICAgICAgICAgICAgICAgfSwgaHVtYW5pemUpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICwgYmFja3NwYWNlOiBmdW5jdGlvbihjdXJTdHJpbmcsIGN1clN0clBvcyl7XG4gICAgICAgICAgICAgICAgLy8gZXhpdCB3aGVuIHN0b3BwZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHZhcnlpbmcgdmFsdWVzIGZvciBzZXRUaW1lb3V0IGR1cmluZyB0eXBpbmdcbiAgICAgICAgICAgICAgICAvLyBjYW4ndCBiZSBnbG9iYWwgc2luY2UgbnVtYmVyIGNoYW5nZXMgZWFjaCB0aW1lIGxvb3AgaXMgZXhlY3V0ZWRcbiAgICAgICAgICAgICAgICB2YXIgaHVtYW5pemUgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoMTAwIC0gMzApKSArIHRoaXMuYmFja1NwZWVkO1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLS0tLS0gdGhpcyBwYXJ0IGlzIG9wdGlvbmFsIC0tLS0tIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHN0cmluZyBhcnJheSBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGUgZmlyc3Qgc3RyaW5nLCBvbmx5IGRlbGV0ZSBvbmUgd29yZFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc3RvcE51bSBhY3R1YWxseSByZXByZXNlbnRzIHRoZSBhbW91bnQgb2YgY2hhcnMgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8ga2VlcCBpbiB0aGUgY3VycmVudCBzdHJpbmcuIEluIG15IGNhc2UgaXQncyAxNC5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHNlbGYuYXJyYXlQb3MgPT0gMSl7XG4gICAgICAgICAgICAgICAgICAgIC8vICBzZWxmLnN0b3BOdW0gPSAxNDtcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAvL2V2ZXJ5IG90aGVyIHRpbWUsIGRlbGV0ZSB0aGUgd2hvbGUgdHlwZWQgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIC8vICBzZWxmLnN0b3BOdW0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLS0tLS0gY29udGludWUgaW1wb3J0YW50IHN0dWZmIC0tLS0tIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGV4dCB3aXRoIGJhc2UgdGV4dCArIHR5cGVkIGNoYXJhY3RlcnNcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRTdHJpbmcgPSBzZWxmLmJhc2VUZXh0ICsgY3VyU3RyaW5nLnN1YnN0cigwLCBjdXJTdHJQb3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgICBzZWxmLmVsLmF0dHIoc2VsZi5hdHRyLCBuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWwudGV4dChuZXh0U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBudW1iZXIgKGlkIG9mIGNoYXJhY3RlciBpbiBjdXJyZW50IHN0cmluZykgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGFuIHRoZSBzdG9wIG51bWJlciwga2VlcCBnb2luZ1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyU3RyUG9zID4gc2VsZi5zdG9wTnVtKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YnRyYWN0IGNoYXJhY3RlcnMgb25lIGJ5IG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyU3RyUG9zLS07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRoZSBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5iYWNrc3BhY2UoY3VyU3RyaW5nLCBjdXJTdHJQb3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdG9wIG51bWJlciBoYXMgYmVlbiByZWFjaGVkLCBpbmNyZWFzZVxuICAgICAgICAgICAgICAgICAgICAvLyBhcnJheSBwb3NpdGlvbiB0byBuZXh0IHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJTdHJQb3MgPD0gc2VsZi5zdG9wTnVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFycmF5UG9zKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuYXJyYXlQb3MgPT09IHNlbGYuc3RyaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXJyYXlQb3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnR5cGV3cml0ZShzZWxmLnN0cmluZ3Nbc2VsZi5hcnJheVBvc10sIGN1clN0clBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGh1bWFuaXplZCB2YWx1ZSBmb3IgdHlwaW5nXG4gICAgICAgICAgICAgICAgfSwgaHVtYW5pemUpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0YXJ0ICYgU3RvcCBjdXJyZW50bHkgbm90IHdvcmtpbmdcblxuICAgICAgICAgICAgLy8gLCBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vICAgICBzZWxmLnN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgLy8gICAgIGNsZWFySW50ZXJ2YWwoc2VsZi50aW1lb3V0KTtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgLy8gLCBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgLy8gICAgIGlmKHNlbGYuc3RvcCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAvLyAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5zdG9wID0gZmFsc2U7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IGFuZCByZWJ1aWxkIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAsIHJlc2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHNlbGYudGltZW91dCk7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5lbC5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuZWwuYWZ0ZXIoJzxzcGFuIGlkPVwiJyArIGlkICsgJ1wiLz4nKVxuICAgICAgICAgICAgICAgIHRoaXMuZWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3IucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMucmVzZXRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAkLmZuLnR5cGVkID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICAgICAgICAsIGRhdGEgPSAkdGhpcy5kYXRhKCd0eXBlZCcpXG4gICAgICAgICAgICAsIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbjtcbiAgICAgICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ3R5cGVkJywgKGRhdGEgPSBuZXcgVHlwZWQodGhpcywgb3B0aW9ucykpKTtcbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuLnR5cGVkLmRlZmF1bHRzID0ge1xuICAgICAgICBzdHJpbmdzOiBbXCJUaGVzZSBhcmUgdGhlIGRlZmF1bHQgdmFsdWVzLi4uXCIsIFwiWW91IGtub3cgd2hhdCB5b3Ugc2hvdWxkIGRvP1wiLCBcIlVzZSB5b3VyIG93biFcIiwgXCJIYXZlIGEgZ3JlYXQgZGF5IVwiXSxcbiAgICAgICAgLy8gdHlwaW5nIHNwZWVkXG4gICAgICAgIHR5cGVTcGVlZDogMCxcbiAgICAgICAgLy8gdGltZSBiZWZvcmUgdHlwaW5nIHN0YXJ0c1xuICAgICAgICBzdGFydERlbGF5OiAwLFxuICAgICAgICAvLyBiYWNrc3BhY2luZyBzcGVlZFxuICAgICAgICBiYWNrU3BlZWQ6IDAsXG4gICAgICAgIC8vIHRpbWUgYmVmb3JlIGJhY2tzcGFjaW5nXG4gICAgICAgIGJhY2tEZWxheTogNTAwLFxuICAgICAgICAvLyBsb29wXG4gICAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgICAvLyBmYWxzZSA9IGluZmluaXRlXG4gICAgICAgIGxvb3BDb3VudDogZmFsc2UsXG4gICAgICAgIC8vIHNob3cgY3Vyc29yXG4gICAgICAgIHNob3dDdXJzb3I6IHRydWUsXG4gICAgICAgIC8vIGNoYXJhY3RlciBmb3IgY3Vyc29yXG4gICAgICAgIGN1cnNvckNoYXI6IFwifFwiLFxuICAgICAgICAvLyBhdHRyaWJ1dGUgdG8gdHlwZSAobnVsbCA9PSB0ZXh0KVxuICAgICAgICBhdHRyOiBudWxsLFxuICAgICAgICAvLyBjYWxsIHdoZW4gZG9uZSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgLy8gc3RhcnRpbmcgY2FsbGJhY2sgZnVuY3Rpb24gYmVmb3JlIGVhY2ggc3RyaW5nXG4gICAgICAgIHByZVN0cmluZ1R5cGVkOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAvL2NhbGxiYWNrIGZvciBldmVyeSB0eXBlZCBzdHJpbmdcbiAgICAgICAgb25TdHJpbmdUeXBlZDogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgLy8gY2FsbGJhY2sgZm9yIHJlc2V0XG4gICAgICAgIHJlc2V0Q2FsbGJhY2s6IGZ1bmN0aW9uKCkge31cbiAgICB9O1xuXG5cbn0od2luZG93LmpRdWVyeSk7XG5cbiQoZnVuY3Rpb24oKXtcbiAgICAkKFwiLmdhbWVzdHlwZWRcIikudHlwZWQoe1xuICAgICAgICBzdHJpbmdzOiBbXCLRhNGD0YLQsdC+0LtcIiwgXCLQsdCw0YHQutC10YLQsdC+0LtcIiwgXCLQstC+0LvQtdC50LHQvtC7XCJdLFxuICAgICAgICB0eXBlU3BlZWQ6IDE3MCxcbiAgICAgICAgYmFja0RlbGF5OiA2MDAsXG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIGxvb3BDb3VudDogZmFsc2VcbiAgICB9KTtcbn0pOyJdfQ==
